//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My05_WPF_UI.CalcBusinessLogicProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcBusinessLogicProxy.ICalcBusinessLogic")]
    public interface ICalcBusinessLogic {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/Plus", ReplyAction="http://tempuri.org/ICalcBusinessLogic/PlusResponse")]
        int Plus(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/Plus", ReplyAction="http://tempuri.org/ICalcBusinessLogic/PlusResponse")]
        System.Threading.Tasks.Task<int> PlusAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/Minus", ReplyAction="http://tempuri.org/ICalcBusinessLogic/MinusResponse")]
        int Minus(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/Minus", ReplyAction="http://tempuri.org/ICalcBusinessLogic/MinusResponse")]
        System.Threading.Tasks.Task<int> MinusAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/GetLog", ReplyAction="http://tempuri.org/ICalcBusinessLogic/GetLogResponse")]
        My03_BusinessLogic.CalcDTO[] GetLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/GetLog", ReplyAction="http://tempuri.org/ICalcBusinessLogic/GetLogResponse")]
        System.Threading.Tasks.Task<My03_BusinessLogic.CalcDTO[]> GetLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/GetLogDates", ReplyAction="http://tempuri.org/ICalcBusinessLogic/GetLogDatesResponse")]
        My03_BusinessLogic.CalcDTO[] GetLogDates(System.DateTime Timestapm1, System.DateTime Timestapm2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcBusinessLogic/GetLogDates", ReplyAction="http://tempuri.org/ICalcBusinessLogic/GetLogDatesResponse")]
        System.Threading.Tasks.Task<My03_BusinessLogic.CalcDTO[]> GetLogDatesAsync(System.DateTime Timestapm1, System.DateTime Timestapm2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcBusinessLogicChannel : My05_WPF_UI.CalcBusinessLogicProxy.ICalcBusinessLogic, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcBusinessLogicClient : System.ServiceModel.ClientBase<My05_WPF_UI.CalcBusinessLogicProxy.ICalcBusinessLogic>, My05_WPF_UI.CalcBusinessLogicProxy.ICalcBusinessLogic {
        
        public CalcBusinessLogicClient() {
        }
        
        public CalcBusinessLogicClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcBusinessLogicClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcBusinessLogicClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcBusinessLogicClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Plus(int x, int y) {
            return base.Channel.Plus(x, y);
        }
        
        public System.Threading.Tasks.Task<int> PlusAsync(int x, int y) {
            return base.Channel.PlusAsync(x, y);
        }
        
        public int Minus(int x, int y) {
            return base.Channel.Minus(x, y);
        }
        
        public System.Threading.Tasks.Task<int> MinusAsync(int x, int y) {
            return base.Channel.MinusAsync(x, y);
        }
        
        public My03_BusinessLogic.CalcDTO[] GetLog() {
            return base.Channel.GetLog();
        }
        
        public System.Threading.Tasks.Task<My03_BusinessLogic.CalcDTO[]> GetLogAsync() {
            return base.Channel.GetLogAsync();
        }
        
        public My03_BusinessLogic.CalcDTO[] GetLogDates(System.DateTime Timestapm1, System.DateTime Timestapm2) {
            return base.Channel.GetLogDates(Timestapm1, Timestapm2);
        }
        
        public System.Threading.Tasks.Task<My03_BusinessLogic.CalcDTO[]> GetLogDatesAsync(System.DateTime Timestapm1, System.DateTime Timestapm2) {
            return base.Channel.GetLogDatesAsync(Timestapm1, Timestapm2);
        }
    }
}
